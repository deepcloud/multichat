{
  "name": "flags",
  "version": "0.1.1",
  "description": "Flag library for node.js",
  "keywords": [
    "flag",
    "args",
    "command line"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/dpup/node-flags.git"
  },
  "homepage": "https://github.com/dpup/node-flags",
  "author": {
    "name": "Daniel Pupius",
    "email": "dan@pupi.us",
    "url": "http://pupius.co.uk"
  },
  "main": "./lib/flags.js",
  "directories": {
    "lib": "./lib"
  },
  "readme": "# Node-Flags\n\nThis is a flags library for use with [node.js](http://nodejs.org/).  Flag definitions can be distributed across multiple files, as long as they are defined before `flags.parse()` is called.\n\n## Installation\n\nFork the latest source from github, or else use NPM:\n\n    npm install flags\n\n## Example\n\n    var flags = require('flags');\n\n    flags.defineString('name', 'Billy Noone', 'Your name');\n    flags.defineInteger('age', 21, 'Your age in whole years');\n    flags.defineNumber('height', 1.80, 'Your height in meters');\n    flags.defineStringList('pets', []);\n    flags.defineMultiString('hobby', []);\n\n    flags.parse();\n\n    // ====\n\n    var info = [];\n    info.push('Name : ' + flags.get('name'));\n    info.push('Age : ' + flags.get('age'));\n    info.push('Height : ' + flags.get('height') + '\"');\n    info.push('Pets : ' + flags.get('pets').join(', '));\n    info.push('Hobbies : \\n  ' + flags.get('hobby').join('\\n  '));\n\n    console.log(info.join('\\n'));\n\nThen on the command line:\n\n    node example.js --name='Your Name' --age 43  --height=1.234 --pets=fred,bob --hobby biking --hobby=snowboarding\n\n## Passing Flags\n\n * Flag names should be prefixed with two dashes: e.g. `--flagname`\n * Values can be separated from the name with either an equal sign or a space: e.g. `--flagname=flagvalue` or `--flagname flagvalue`\n * Complex string flags should be quoted: e.g. `--flag=\"some flag with spaces\"`\n * Additional non-flag arguments can be passed by adding `--` before the subsequent args.  The remaining args will be returned from `flags.parse()` as an array, e.g. `--one --two -- other stuff here`\n\n## Defining Flags\n\nTo define flags, use one of the defineX functions exported by the `flags` module:\n\n**flags.defineString** - Takes the raw input from the command line.\n\n**flags.defineBoolean** - Usually doesn't take a value, passing --flag will set the corresponding flag to true.  Also supported are --noflag to set it to false and --flag=true or --flag=false or --flag=0 or --flag=1 or --flag=f or --flag=t \n\n**flags.defineInteger** - Must take a value and will be cast to a Number.  Passing a non-integer arg will throw.\n\n**flags.defineNumber** - Must take a value and will be cast to a number.  Passing an arg that evaluates to NaN will throw.\n\n**flags.defineStringList** - Takes a comma separated argument list and returns an array as it's value.\n\n**flags.defineMultiString** - Same as defineString but allows multiple flags to be passed.  All values will be returned in an array.\n\n\nAll the define methods take the same arguments:\n\n    flags.defineX(name, opt_default, opt_description);\n\n`name` - The flag's name.  \n`opt_default` - [optional] The default value if not specified on the command line.  \n`opt_description` - [optional] Description to show in the help text.\n\nThe methods return a Flag object that exposes the following methods, for additional configuration:\n\n`flag.setDefault({*} defaultValue)` - Sets the flag's default value.  \n`flag.setDescription({string} description)` - Sets the flag's description field.  \n`flag.setValidator({function(string)} validator)` - Sets a function for validating the input, should throw if the input isn't valid.  \n`flag.setSecret({boolean} secret)` - If set to true then the flag won't show up in the help text.  \n\nThese setters return the flag instance so they can be chained:\n\n    flags.defineString('test').\n        setDefault('empty').\n        setDescription('A test flag').\n        setValidator(function(inp) {\n          if (inp.substr(0, 1) != 'e') {\n            throw Error('Flag must start with an \"e\"');\n          }\n        });\n\n## Querying Flag Values\n\nA flag's value can be queried by either calling `flags.get('flagname')` or by querying the flags object directly `flags.FLAGS.flagname.get()`.\n\nThe flag object also contains the following properties you may be interested in:\n\n    flag.name\n    flag.defaultValue\n    flag.currentValue\n    flag.isSet\n\n## Testing\n\nBy default `flags.parse` uses process.argv and slices off the first 2 elements.  For tests you can pass a predefined set of arguments as an array:\n\n    flags.parse(['--flag', '--nofood', '--foo=bar']);\n\nIf you want to change flags between test cases, you may call:\n\n    flags.reset();\n\n## TODOs\n\n * Support --flagsfile\n * Support multi space separated flags, e.g. --files file1 file2 file3\n\n",
  "_id": "flags@0.1.1",
  "dist": {
    "shasum": "ab7fe79a7a5dcb3588c7282f7d55a51eb2c1308f"
  },
  "_from": "flags"
}
